name: Test Suite

on:
  push:
    branches: [ main, develop, demo ]
  pull_request:
    branches: [ main, develop, demo ]

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run check
      continue-on-error: true  # Allow TypeScript errors for now
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Build frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: .svelte-kit/output/
        retention-days: 7

  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    env:
      NODE_ENV: test
      JWT_SECRET: test_jwt_secret_key_for_github_actions_minimum_32_characters_long
      JWT_REFRESH_SECRET: test_refresh_secret_key_for_github_actions_minimum_32_characters_long
      PORT: 3001
      CORS_ORIGIN: http://localhost:5173,http://localhost:50063
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd server
        npm ci
        
    - name: Initialize test database
      run: |
        cd server
        npm run init-db
        
    - name: Run backend linting
      run: |
        cd server
        npm run lint
      continue-on-error: true  # Backend linting not configured yet
        
    - name: Start backend server (background)
      run: |
        cd server
        npm start &
        sleep 10  # Wait for server to start
        
    - name: Test backend health endpoint
      run: |
        curl -f http://localhost:3001/health || exit 1
        
    - name: Test API endpoints
      run: |
        # Test announcements endpoint
        curl -f http://localhost:3001/api/announcements || exit 1
        echo "✅ Backend API endpoints responding correctly"

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [frontend-tests, backend-tests]
    
    env:
      NODE_ENV: test
      JWT_SECRET: test_jwt_secret_key_for_github_actions_minimum_32_characters_long
      JWT_REFRESH_SECRET: test_refresh_secret_key_for_github_actions_minimum_32_characters_long
      PORT: 3001
      CORS_ORIGIN: http://localhost:5173,http://localhost:50063,http://localhost:50066
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install all dependencies
      run: |
        npm ci
        cd server
        npm ci
        
    - name: Initialize backend database
      run: |
        cd server
        npm run init-db
        
    - name: Start backend server
      run: |
        cd server
        npm start &
        sleep 10
        
    - name: Build frontend
      run: npm run build
      
    - name: Test frontend-backend integration
      run: |
        # Test that backend is responding
        curl -f http://localhost:3001/health
        
        # Test API endpoints that frontend uses
        curl -f http://localhost:3001/api/announcements
        
        echo "✅ Frontend-backend integration working"

  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: [integration-tests]
    
    env:
      NODE_ENV: test
      JWT_SECRET: test_jwt_secret_key_for_github_actions_minimum_32_characters_long
      JWT_REFRESH_SECRET: test_refresh_secret_key_for_github_actions_minimum_32_characters_long
      PORT: 3001
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd server
        npm ci
        
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Initialize backend database
      run: |
        cd server
        npm run init-db
        
    - name: Start backend server
      run: |
        cd server
        npm start &
        sleep 10
        
    - name: Start frontend server
      run: |
        npm run build
        npm run preview &
        sleep 5
        
    - name: Run Playwright tests
      run: npm run test:e2e
      continue-on-error: true  # E2E tests may not be fully configured yet
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-tests:
    runs-on: ubuntu-latest
    name: Security Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd server
        npm ci
        
    - name: Run npm audit (Frontend)
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run npm audit (Backend)
      run: |
        cd server
        npm audit --audit-level=high
      continue-on-error: true
      
    - name: Check for secrets in code
      run: |
        # Basic check for potential secrets (expand as needed)
        # Look for hardcoded passwords with actual values (not empty strings or variables)
        if grep -rE "password\s*=\s*['\"][a-zA-Z0-9._-]{3,}['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.github; then
          echo "⚠️  Potential hardcoded passwords found"
          exit 1
        fi
        
        # Look for hardcoded API keys with actual values
        if grep -rE "api_key\s*=\s*['\"][a-zA-Z0-9._-]{10,}['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.github; then
          echo "⚠️  Potential API keys found"
          exit 1
        fi
        
        # Look for other common secret patterns with actual values
        if grep -rE "(secret|token)\s*=\s*['\"][a-zA-Z0-9._-]{10,}['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.github; then
          echo "⚠️  Potential hardcoded secrets found"
          exit 1
        fi
        
        echo "✅ Basic security checks passed"

  test-report:
    runs-on: ubuntu-latest
    name: Test Report
    needs: [frontend-tests, backend-tests, integration-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
    - name: Generate test report
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '⚠️ Skipped/Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Workflow completed at: $(date)" >> $GITHUB_STEP_SUMMARY