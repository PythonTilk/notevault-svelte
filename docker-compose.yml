version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: notevault-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_PATH=/app/database/notevault.db
      - JWT_SECRET=docker-jwt-secret-change-in-production
      - CORS_ORIGIN=http://localhost:3000,http://frontend:3000
      # Real-time collaboration
      - ENABLE_WEBSOCKETS=true
      - SOCKET_IO_CORS_ORIGIN=http://localhost:3000,http://frontend:3000
      # Analytics and monitoring
      - ENABLE_ANALYTICS=true
      - REDIS_URL=redis://redis:6379
      # S3 Configuration for backups
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-notevault-backups}
    volumes:
      - backend_data:/app/database
      - uploads_data:/app/uploads
    networks:
      - notevault-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: notevault-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:3001
      # WebSocket configuration for real-time features
      - VITE_WS_URL=ws://localhost:3001
      - VITE_ENABLE_COLLABORATION=true
    depends_on:
      - backend
      - redis
    networks:
      - notevault-network
    restart: unless-stopped

  # Redis for real-time collaboration and caching
  redis:
    image: redis:7-alpine
    container_name: notevault-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - notevault-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: notevault-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
      - redis
    networks:
      - notevault-network
    restart: unless-stopped

volumes:
  backend_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local

networks:
  notevault-network:
    driver: bridge