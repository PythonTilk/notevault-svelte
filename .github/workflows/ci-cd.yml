name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies (Frontend)
      run: npm ci
      
    - name: Install dependencies (Backend)
      run: cd server && npm ci
      
    - name: Run ESLint (Frontend)
      run: npm run lint || true
      
    - name: Run TypeScript check (Frontend)
      run: npm run check || true
      
    - name: Run tests (Frontend)
      run: npm run test || true
      
    - name: Run tests (Backend)  
      run: cd server && npm test || true
      
    - name: Security audit (Frontend)
      run: npm audit --audit-level=moderate || true
      
    - name: Security audit (Backend)
      run: cd server && npm audit --audit-level=moderate || true
      
    - name: Run SAST with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Build and Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        component: [frontend, backend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies (Frontend)
      if: matrix.component == 'frontend'
      run: npm ci
      
    - name: Install dependencies (Backend)
      if: matrix.component == 'backend'
      run: cd server && npm ci
      
    - name: Build frontend
      if: matrix.component == 'frontend'
      run: npm run build
      
    - name: Test backend
      if: matrix.component == 'backend'
      run: cd server && npm run test || true
      
    - name: Upload build artifacts
      if: matrix.component == 'frontend'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/
        retention-days: 30

  # Docker Build and Push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        component: [frontend, backend]
        
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image (Frontend)
      if: matrix.component == 'frontend'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=${{ secrets.VITE_API_URL || 'http://localhost:3001/api' }}
          
    - name: Build and push Docker image (Backend)
      if: matrix.component == 'backend'
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        component: [frontend, backend]
        
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to development server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USERNAME }}
        key: ${{ secrets.DEV_SSH_KEY }}
        script: |
          cd /opt/notevault
          git pull origin develop
          docker-compose -f docker-compose.development.yml pull
          docker-compose -f docker-compose.development.yml up -d
          docker system prune -f
          
    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.DEV_URL }}/health || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/notevault
          git pull origin staging
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          docker system prune -f
          
    - name: Run integration tests
      run: |
        sleep 60
        # Add integration test commands here
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        
    - name: Performance test
      run: |
        # Add performance test commands here
        echo "Performance tests would run here"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.ref,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false
          });
          
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/notevault
          git pull origin main
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
          docker system prune -f
          
    - name: Health check
      run: |
        sleep 60
        curl -f ${{ secrets.PROD_URL }}/health || exit 1
        
    - name: Update deployment status
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: '${{ steps.deployment.outputs.deployment_id }}',
            state: state,
            description: state === 'success' ? 'Deployment successful' : 'Deployment failed',
            environment_url: '${{ secrets.PROD_URL }}'
          });

  # Database Migration
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run database migrations
      uses: appleboy/ssh-action@v1.0.0  
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/notevault
          docker-compose -f docker-compose.production.yml exec -T backend npm run migrate || true

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, migrate-database]
    if: always() && github.event_name == 'release'
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        
    - name: Notify Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        status: ${{ job.status }}
        title: "NoteVault Deployment"
        description: "Production deployment ${{ job.status }}"