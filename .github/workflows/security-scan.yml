name: Security Scan

on:
  push:
    branches: [ main, develop, security/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Install backend dependencies
      run: |
        cd server
        npm ci
        
    - name: Run ESLint security scan
      run: npm run lint
      continue-on-error: true
      
    - name: Run custom security tests
      run: npm run test:security
      
    - name: Frontend vulnerability scan
      run: |
        npm audit --audit-level moderate
        npm audit --json > frontend-audit.json || true
        
    - name: Backend vulnerability scan
      run: |
        cd server
        npm audit --audit-level moderate
        npm audit --json > backend-audit.json || true
        
    - name: Upload audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-results
        path: |
          frontend-audit.json
          server/backend-audit.json
          
    - name: SARIF security scan
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif
        
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
  docker-security:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        cd server
        docker build -t notevault-server .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'notevault-server'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Dockle security scanner
      run: |
        VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/${VERSION}/dockle_${VERSION#v}_Linux-64bit.deb
        sudo dpkg -i dockle.deb
        dockle --exit-code 1 --exit-level warn notevault-server
        
  security-report:
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download audit artifacts
      uses: actions/download-artifact@v3
      with:
        name: security-audit-results
        
    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Frontend Vulnerabilities" >> security-report.md
        if [ -f frontend-audit.json ]; then
          cat frontend-audit.json | jq -r '.metadata.vulnerabilities | to_entries[] | "- \(.key): \(.value)"' >> security-report.md || echo "No vulnerabilities found" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## Backend Vulnerabilities" >> security-report.md
        if [ -f backend-audit.json ]; then
          cat backend-audit.json | jq -r '.metadata.vulnerabilities | to_entries[] | "- \(.key): \(.value)"' >> security-report.md || echo "No vulnerabilities found" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## Security Score" >> security-report.md
        echo "This report was generated automatically by the security scanning pipeline." >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
        
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-report.md')) {
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ðŸ”’ Security Scan Results\n\n' + report
            });
          }